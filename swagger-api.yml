openapi: 3.0.3
info:
  title: Pizzaria Miamor
  description: |-
   API for controlling Products, Users and Promotions
  termsOfService: http://swagger.io/terms/
  contact:
    email: arthurpiloto.github@email.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://
tags:
  - name: product
    description: Everything about Products
  - name: product-type
    description: Everything about Types
  - name: category
    description: Everything about Categories
  - name: user
    description: Everything about Users
  - name: ingredient
    description: Everything about Ingredients
  - name: message
    description: Everything about Messages
  - name: message-type
    description: Everything about Message Types
  - name: promotion
    description: Everything about Message Promotions
paths:
  /v1/products:
    get:
      tags:
        - product
      summary: List of all Products
      description: List of all Products
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
        '404':
          description: Not Found
        '500':
          description: Internal Error
  /v1/products/category/{productCategory}:
    get:
      tags:
        - product
      summary: List of all Products with that Category
      description: List of all Products with that Category
      parameters:
        - name: productCategory
          in: path
          description: Name of the Product Category
          required: true
          schema:
            type: string
            example: Pizza
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
        '404':
          description: Not Found
        '500':
          description: Internal Error
  /v1/products/type/{productType}:
    get:
      tags:
        - product
      summary: List of all Products with that Type
      description: List of all Products with that Type
      parameters:
        - name: productType
          in: path
          description: Name of the Product Type
          required: true
          schema:
            type: string
            example: Salgada
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
        '404':
          description: Not Found
        '500':
          description: Internal Error
  /v1/product/{productID}:
#    get:
#      tags:
#        - product
#      summary: Find a Product by ID
#      description: Find a Product by ID
#      parameters:
#        - name: productID
#          in: path
#          description: ID of the Product
#          required: true
#          schema:
#            type: integer
#            format: int64
#            example: 10
#      responses:
#        '200':
#          description: Successful operation
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Products'
#        '404':
#          description: Not Found
#        '500':
#          description: Internal Error
    put:
      tags:
        - product
      summary: Update an existing Product
      description: Update an existing Product
      parameters:
        - name: productID
          in: path
          description: ID of Product to return
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      requestBody:
        content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Item updated successfully
        '400':
          description: Empty Body, Required Fields or Required ID
        '415':
          description: Incorrect Content-Type
        '500':
          description: Internal Error
    delete:
      tags:
        - product
      summary: Delete a Product
      description: Delete a Product
      parameters:
        - name: productID
          in: path
          description: ID of Product to return
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      responses:
        '200':
          description: Item deleted successfully
        '400':
          description: Required ID
        '500':
          description: Internal Error
  /v1/product:
    post:
      tags:
        - product
      summary: Add a new Product
      description: Add a new Product
      requestBody:
        description: Add a new Product
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        required: true
      responses:
        '201':
          description: Item created successfully
        '400':
          description: Empty Body or Required Fields
        '413':
          description: Number of Characters Exceeded
        '415':
          description: Incorrect Content-Type
        '500':
          description: Internal Error
  /v1/product-types:
    get:
      tags:
        - product-type
      summary: List of all Types
      description: List of all Types
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product-Types'
        '404':
          description: Not Found
        '500':
          description: Internal Error
  /v1/product-type/{productTypeName}:
    get:
      tags:
        - product-type
      summary: Get the ID of that Type name
      description: Get the ID of that Type name
      parameters:
        - name: productTypeName
          in: path
          description: Name of the Product Type
          required: true
          schema:
            type: string
            example: Salgada
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product-Type-ID'
        '404':
          description: Not Found
        '500':
          description: Internal Error
  /v1/product-type/{typeID}:
#    get:
#      tags:
#        - product-type
#      summary: Find a Type by ID
#      description: Find a Type by ID
#      parameters:
#        - name: typeID
#          in: path
#          description: ID of the Product
#          required: true
#          schema:
#            type: integer
#            format: int64
#            example: 10
#      responses:
#        '200':
#          description: Successful operation
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Product-Types'
#        '404':
#          description: Not Found
#        '500':
#          description: Internal Error
    put:
      tags:
        - product-type
      summary: Update an existing Type
      description: Update an existing Type
      parameters:
        - name: typeID
          in: path
          description: ID of Type to return
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      requestBody:
        content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product-Type'
      responses:
        '200':
          description: Item updated successfully
        '400':
          description: Empty Body, Required Fields or Required ID
        '415':
          description: Incorrect Content-Type
        '500':
          description: Internal Error
    delete:
      tags:
        - product-type
      summary: Delete a Tyoe
      description: Delete a Type
      parameters:
        - name: typeID
          in: path
          description: ID of Type to return
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      responses:
        '200':
          description: Item deleted successfully
        '400':
          description: Required ID
        '500':
          description: Internal Error
  /v1/product-type:
    post:
      tags:
        - product-type
      summary: Add a new Type
      description: Add a new Type
      requestBody:
        description: Add a new Type
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product-Type'
        required: true
      responses:
        '201':
          description: Item created successfully
        '400':
          description: Empty Body or Required Fields
        '413':
          description: Number of Characters Exceeded
        '415':
          description: Incorrect Content-Type
        '500':
          description: Internal Error
  /v1/categories:
    get:
      tags:
        - category
      summary: List of all Categories
      description: List of all Categories
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Categories'
        '404':
          description: Not Found
        '500':
          description: Internal Error
  /v1/category/{categoryName}:
    get:
      tags:
        - category
      summary: Get the ID of that Category name
      description: Get the ID of that Category name
      parameters:
        - name: categoryName
          in: path
          description: Name of the Category
          required: true
          schema:
            type: string
            example: Pizza
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Categories'
        '404':
          description: Not Found
        '500':
          description: Internal Error
  /v1/category/{categoryID}:
#    get:
#      tags:
#        - category
#      summary: Find a Category by ID
#      description: Find a Category by ID
#      parameters:
#        - name: categoryID
#          in: path
#          description: ID of the Category
#          required: true
#          schema:
#            type: integer
#            format: int64
#            example: 10
#      responses:
#        '200':
#          description: Successful operation
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Categories'
#        '404':
#          description: Not Found
#        '500':
#          description: Internal Error
    put:
      tags:
        - category
      summary: Update an existing Category
      description: Update an existing Category
      parameters:
        - name: categoryID
          in: path
          description: ID of Category to return
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      requestBody:
        content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Item updated successfully
        '400':
          description: Empty Body, Required Fields or Required ID
        '415':
          description: Incorrect Content-Type
        '500':
          description: Internal Error
    delete:
      tags:
        - category
      summary: Delete a Category
      description: Delete a Category
      parameters:
        - name: categoryID
          in: path
          description: ID of Category to return
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      responses:
        '200':
          description: Item deleted successfully
        '400':
          description: Required ID
        '500':
          description: Internal Error
  /v1/category:
    post:
      tags:
        - category
      summary: Add a new Category
      description: Add a new Category
      requestBody:
        description: Add a new Category
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        required: true
      responses:
        '201':
          description: Item created successfully
        '400':
          description: Empty Body or Required Fields
        '413':
          description: Number of Characters Exceeded
        '415':
          description: Incorrect Content-Type
        '500':
          description: Internal Error
  /v1/users:
    get:
      tags:
        - user
      summary: List of all Users
      description: List of all Users
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        '404':
          description: Not Found
        '500':
          description: Internal Error
  /v1/user/{userID}:
#    get:
#      tags:
#        - user
#      summary: Find a User by ID
#      description: Find a User by ID
#      parameters:
#        - name: userID
#          in: path
#          description: ID of the User
#          required: true
#          schema:
#            type: integer
#            format: int64
#            example: 10
#      responses:
#        '200':
#          description: Successful operation
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Users'
#        '404':
#          description: Not Found
#        '500':
#          description: Internal Error
    put:
      tags:
        - user
      summary: Update an existing User
      description: Update an existing User
      parameters:
        - name: userID
          in: path
          description: ID of User to return
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      requestBody:
        content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Item updated successfully
        '400':
          description: Empty Body, Required Fields or Required ID
        '415':
          description: Incorrect Content-Type
        '500':
          description: Internal Error
    delete:
      tags:
        - user
      summary: Delete a User
      description: Delete a User
      parameters:
        - name: userID
          in: path
          description: ID of User to return
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      responses:
        '200':
          description: Item deleted successfully
        '400':
          description: Required ID
        '500':
          description: Internal Error
  /v1/user:
    post:
      tags:
        - user
      summary: Add a new User
      description: Add a new User
      requestBody:
        description: Add a new User
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: Item created successfully
        '400':
          description: Empty Body or Required Fields
        '413':
          description: Number of Characters Exceeded
        '415':
          description: Incorrect Content-Type
        '500':
          description: Internal Error
  /v1/ingredients:
    get:
      tags:
        - ingredient
      summary: List of all Ingredients
      description: List of all Ingredients
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredients'
        '404':
          description: Not Found
        '500':
          description: Internal Error
  /v1/ingredient/{ingredientID}:
#    get:
#      tags:
#        - ingredient
#      summary: Find a Ingredient by ID
#      description: Find a Ingredient by ID
#      parameters:
#        - name: ingredientID
#          in: path
#          description: ID of the Ingredient
#          required: true
#          schema:
#            type: integer
#            format: int64
#            example: 10
#      responses:
#        '200':
#          description: Successful operation
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Ingredients'
#        '404':
#          description: Not Found
#        '500':
#          description: Internal Error
    put:
      tags:
        - ingredient
      summary: Update an existing Ingredient
      description: Update an existing Ingredient
      parameters:
        - name: ingredientID
          in: path
          description: ID of Ingredient to return
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      requestBody:
        content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
      responses:
        '200':
          description: Item updated successfully
        '400':
          description: Empty Body, Required Fields or Required ID
        '415':
          description: Incorrect Content-Type
        '500':
          description: Internal Error
  /v1/ingredient/delete/{ingredientID}:
    put:
      tags:
        - ingredient
      summary: Disable an existing Ingredient
      description: Disable an existing Ingredient
      parameters:
        - name: ingredientID
          in: path
          description: ID of Ingredient to return
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      requestBody:
        content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
      responses:
        '200':
          description: Item deleted successfully
        '400':
          description: Required ID
        '500':
          description: Internal Error
  /v1/ingredient/rehabilitate/{ingredientID}:
    put:
      tags:
        - ingredient
      summary: Rehabilitate an existing Ingredient
      description: Rehabilitate an existing Ingredient
      parameters:
        - name: ingredientID
          in: path
          description: ID of Ingredient to return
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      requestBody:
        content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
      responses:
        '200':
          description: Item updated successfully
        '400':
          description: Empty Body, Required Fields or Required ID
        '415':
          description: Incorrect Content-Type
        '500':
          description: Internal Error
  /v1/ingredient:
    post:
      tags:
        - ingredient
      summary: Add a new Ingredient
      description: Add a new Ingredient
      requestBody:
        description: Add a new Ingredient
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
        required: true
      responses:
        '201':
          description: Item created successfully
        '400':
          description: Empty Body or Required Fields
        '413':
          description: Number of Characters Exceeded
        '415':
          description: Incorrect Content-Type
        '500':
          description: Internal Error
  /v1/messages:
    get:
      tags:
        - message
      summary: List of all Messages
      description: List of all Messages
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Messages'
        '404':
          description: Not Found
        '500':
          description: Internal Error
  /v1/message:
    post:
      tags:
        - message
      summary: Add a new Message
      description: Add a new Message
      requestBody:
        description: Add a new Message
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        required: true
      responses:
        '201':
          description: Item created successfully
        '400':
          description: Empty Body or Required Fields
        '413':
          description: Number of Characters Exceeded
        '415':
          description: Incorrect Content-Type
        '500':
          description: Internal Error
  /v1/message-types:
    get:
      tags:
        - message-type
      summary: List of all Message Types
      description: List of all Message Types
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message-Types'
        '404':
          description: Not Found
        '500':
          description: Internal Error
  /v1/message-type/{messageTypeID}:
#    get:
#      tags:
#        - message-type
#      summary: Find a Message Type by ID
#      description: Find a Message Type by ID
#      parameters:
#        - name: messageTypeID
#          in: path
#          description: ID of the Message Type
#          required: true
#          schema:
#            type: integer
#            format: int64
#            example: 10
#      responses:
#        '200':
#          description: Successful operation
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Message-Types'
#        '404':
#          description: Not Found
#        '500':
#          description: Internal Error
    put:
      tags:
        - message-type
      summary: Update an existing Message Type
      description: Update an existing Message Type
      parameters:
        - name: messageTypeID
          in: path
          description: ID of Message Type to return
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      requestBody:
        content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message-Type'
      responses:
        '200':
          description: Item updated successfully
        '400':
          description: Empty Body, Required Fields or Required ID
        '415':
          description: Incorrect Content-Type
        '500':
          description: Internal Error
    delete:
      tags:
        - message-type
      summary: Delete a Message Type
      description: Delete a Message Type
      parameters:
        - name: messageTypeID
          in: path
          description: ID of Message Type to return
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      responses:
        '200':
          description: Item deleted successfully
        '400':
          description: Required ID
        '500':
          description: Internal Error
  /v1/message-type:
    post:
      tags:
        - message-type
      summary: Add a new Message Type
      description: Add a new Message Type
      requestBody:
        description: Add a new Message Type
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message-Type'
        required: true
      responses:
        '201':
          description: Item created successfully
        '400':
          description: Empty Body or Required Fields
        '413':
          description: Number of Characters Exceeded
        '415':
          description: Incorrect Content-Type
        '500':
          description: Internal Error
  /v1/promotions:
    get:
      tags:
        - promotion
      summary: List of all Products
      description: List of all Products
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Promotions'
        '404':
          description: Not Found
        '500':
          description: Internal Error
  /v1/message-type/{promotionID}:
#    get:
#      tags:
#        - promotion
#      summary: Find a Promotion by ID
#      description: Find a Promotion by ID
#      parameters:
#        - name: promotionID
#          in: path
#          description: ID of the Promotion
#          required: true
#          schema:
#            type: integer
#            format: int64
#            example: 10
#      responses:
#        '200':
#          description: Successful operation
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/Promotions'
#        '404':
#          description: Not Found
#        '500':
#          description: Internal Error
    put:
      tags:
        - promotion
      summary: Update an existing Promotion
      description: Update an existing Promotion
      parameters:
        - name: promotionID
          in: path
          description: ID of Promotion to return
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      requestBody:
        content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Promotion'
      responses:
        '200':
          description: Item updated successfully
        '400':
          description: Empty Body, Required Fields or Required ID
        '415':
          description: Incorrect Content-Type
        '500':
          description: Internal Error
    delete:
      tags:
        - promotion
      summary: Delete a Promotion
      description: Delete a Promotion
      parameters:
        - name: promotionID
          in: path
          description: ID of Promotion to return
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      responses:
        '200':
          description: Item deleted successfully
        '400':
          description: Required ID
        '500':
          description: Internal Error
  /v1/promotion:
    post:
      tags:
        - promotion
      summary: Add a new Promotion
      description: Add a new Promotion
      requestBody:
        description: Add a new Promotion
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promotion'
        required: true
      responses:
        '201':
          description: Item created successfully
        '400':
          description: Empty Body or Required Fields
        '413':
          description: Number of Characters Exceeded
        '415':
          description: Incorrect Content-Type
        '500':
          description: Internal Error
components:
  schemas:
    Products:
      required:
        - nome
        - preco
        - foto
      type: object
      properties:
        id:
          type: integer
          example: 10
        nome:
          type: string
          example: Pizza de Mussarela
        preco:
          type: integer
          format: float
          example: 29.90
        foto:
          type: string
          example: https://storage.googleapis.com/senai-pizzaria.appspot.com/1669297933575.jpeg
        descricao:
          type: string
          example: Pizza gostosa feita ao ponto com incríveis sabores
        qtde_favorito:
          type: integer
          example: 1500
        categoria:
          type: string
          example: Pizza
        tipo:
          type: string
          example: Salgada
    Product:
      required:
        - nome
        - preco
        - foto
        - status
      type: object
      properties:
        nome:
          type: string
          example: Pizza de Mussarela
        preco:
          type: integer
          format: float
          example: 29.90
        foto:
          type: string
          example: https://storage.googleapis.com/senai-pizzaria.appspot.com/1669297933575.jpeg
        id_categoria:
          type: integer
          example: 3
        id_tipo:
          type: integer
          example: 1
        status:
          type: boolean
          example: true
        descricao:
          type: string
          example: Pizza de Mussarela feita ao ponto
    Product-Types:
      required:
        - tipo
      type: object
      properties:
        id:
          type: integer
          example: 1
        tipo:
          type: string
          example: Salgada
    Product-Type:
      required:
        - tipo
      type: object
      properties:
        tipo:
          type: string
          example: Salgada
    Product-Type-ID:
      type: object
      properties:
        id:
          type: integer
          example: 10
    Categories:
      required:
        - nome
      type: object
      properties:
        id:
          type: integer
          example: 3
        nome:
          type: string
          example: Pizza
    Category:
      required:
        - nome
      type: object
      properties:
        nome:
          type: string
          example: Pizza
    Users:
      required:
        - nome
        - email
        - senha
        - cpf
      type: object
      properties:
        id:
          type: integer
          example: 9
        nome:
          type: string
          example: Vinícius Santos Oliveira
        email:
          type: string
          example: vini@gmail.com
        senha:
          type: string
          example: 999
        celular:
          type: string
          example: 99 9 9999-9999
        rg:
          type: string
          example: 99.999.999-9
        cpf:
          type: string
          example: 999.999.999-99
    User:
      required:
        - nome
        - email
        - senha
        - cpf
      type: object
      properties:
        nome:
          type: string
          example: Vinícius Santos Oliveira
        email:
          type: string
          example: vini@gmail.com
        senha:
          type: string
          example: 999
        celular:
          type: string
          example: 99 9 9999-9999
        rg:
          type: string
          example: 99.999.999-9
        cpf:
          type: string
          example: 999.999.999-99
    Ingredients:
      required:
        - nome
      type: object
      properties:
        id:
          type: integer
          example: 10
        nome:
          type: string
          example: Salada
        status_ingrediente:
          type: boolean
          example: true
    Ingredient:
      required:
        - nome
        - status_ingrediente
      type: object
      properties:
        nome:
          type: string
          example: Salada
        status_ingrediente:
          type: boolean
          example: false
    Messages:
      required:
        - nome_cliente
        - email
        - data_envio
        - mensagem
        - tipo
      type: object
      properties:
        id:
          type: integer
          example: 6
        nome_cliente:
          type: string
          example: Arthur Piloto
        email:
          type: string
          example: arthur@gmail.com
        data_envio:
          type: string
          example: 06/12/2022
        mensagem:
          type: string
          example: Ótimo atendimento!
        tipo:
          type: string
          example: Crítica
    Message:
      required:
        - nome_cliente
        - email
        - data_envio
        - mensagem
        - tipo
      type: object
      properties:
        nome_cliente:
          type: string
          example: Arthur Piloto
        email:
          type: string
          example: arthur@gmail.com
        data_envio:
          type: string
          example: 06/12/2022
        mensagem:
          type: string
          example: Ótimo atendimento!
        tipo:
          type: string
          example: Crítica
    Message-Types:
      required:
        - nome
      type: object
      properties:
        id:
          type: integer
          example: 3
        nome_cliente:
          type: string
          example: Sugestão
    Message-Type:
      required:
        - nome
      type: object
      properties:
        nome_cliente:
          type: string
          example: Sugestão
    Promotions:
      required:
        - nome
        - porcentagem_desconto
        - data_inicio
        - data_termino
      type: object
      properties:
        id:
          type: integer
          example: 10
        nome:
          type: string
          example: Promoção de Pizza de Mussarela
        porcentagem_desconto:
          type: integer
          format: float
          example: 50%
        preco_final:
          type: integer
          format: double
          example: 10.90
        data_inicio:
          type: string
          example: 10/12/2022
        data_termino:
          type: string
          example: 12/12/2022
    Promotion:
      required:
        - nome
        - porcentagem_desconto
        - data_inicio
        - data_termino
      type: object
      properties:
        nome:
          type: string
          example: Promoção de Pizza de Mussarela
        porcentagem_desconto:
          type: integer
          format: float
          example: 50%
        preco_final:
          type: integer
          format: double
          example: 10.90
        data_inicio:
          type: string
          example: 10/12/2022
        data_termino:
          type: string
          example: 12/12/2022
  requestBodies:
    Product:
      description: Product object that needs to be added to the system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
    Product-Type:
      description: Product-Type object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product-Type'
    Category:
      description: Category object that needs to be added to the system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Category'
    User:
      description: User object that needs to be added to the system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    Ingredient:
      description: Ingredient object that needs to be added to the system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Ingredient'
    Message:
      description: Message object that needs to be added to the system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message'
    Message-Type:
      description: Message-Type object that needs to be added to the system
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Message-Type'